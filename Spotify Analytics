# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.
#Next, I explored the data and formulated questions and answered them.

#1. average length of the songs of the most popular artists
SELECT artist_name, ROUND(AVG(duration_ms)/60000,2) AS avg_duration_min
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY MAX(popularity) DESC
LIMIT 10;

#2. Songs with high energy and popularity.
SELECT track_name, artist_name, energy, popularity
FROM BIT_DB.Spotifydata
WHERE energy > 0.8
ORDER BY popularity DESC;

#3. Explore the relationship between different musical attributes and categorized into: very popular, popular, less popular
SELECT
CASE WHEN popularity >= 90 THEN 'Very popular'
    WHEN popularity >= 70 AND popularity < 90 THEN 'Popular'
    ELSE 'Less popular'
    END AS popularity_category, count(track_name) AS count_songs,
    ROUND(AVG(danceability),2) AS avg_dance, 
    ROUND(AVG(energy),2) AS avg_energy,
    ROUND(AVG(acousticness),2) AS avg_acoust,
    ROUND(AVG(valence),2) AS avg_val
FROM BIT_DB.Spotifydata
GROUP BY popularity_category;
